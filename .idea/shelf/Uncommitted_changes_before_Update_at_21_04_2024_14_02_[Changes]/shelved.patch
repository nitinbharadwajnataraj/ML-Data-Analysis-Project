Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\nimport pandas as pd\r\nimport plotly.graph_objects as go\r\nfrom data_model import data_model as hairpin_data_model, data_model\r\nfrom create_fake_data import create_fake_dataset\r\nfrom Compute_fit import compute_fit,count_yes_no\r\n\r\ndef df_return():\r\n    df = create_fake_dataset()\r\n    return df\r\n\r\ndef scatter_plot():\r\n    st.markdown(\r\n        f'<h1 style=\"text-align: center;\">Box and Cylinder Analysis</h1>',\r\n        unsafe_allow_html=True\r\n    )\r\n    df = df_return()\r\n    df_1 = compute_fit()\r\n    df_1 = df_1.drop(columns=['ID'], axis=1)\r\n\r\n    # Allow users to choose columns for the scatter plot\r\n    selected_columns = st.multiselect(\"Select columns for scatter plot\", df_1.columns)\r\n\r\n    # Define colors for \"yes\" and \"no\" values\r\n    yes_color = 'green'\r\n    no_color = 'red'\r\n\r\n    # Create scatter plot if at least two columns are selected\r\n    if len(selected_columns) >= 2:\r\n        st.write(\"Scatter Plot:\")\r\n        fig = go.Figure()\r\n        for col in selected_columns:\r\n            # Set color based on 'check' value\r\n            colors = [yes_color if val == 'yes' else no_color for val in df_1[\"check\"]]\r\n            fig.add_trace(go.Scatter(x=df_1.index, y=df_1[col], mode='markers', name=col, marker=dict(color=colors)))\r\n        st.plotly_chart(fig)\r\n    else:\r\n        st.warning(\"Please select at least two columns for the scatter plot.\")\r\n\r\n# def scatter_plot():\r\n#     # Center the title\r\n#\r\n#     df = df_return()\r\n#     st.write(df)\r\n#     # Allow users to choose columns for the scatter plot\r\n#     # selected_columns = st.multiselect(\"Select columns for scatter plot\", df.columns)\r\n#\r\n#     # Create scatter plot if at least two columns are selected\r\n#     for column in df.columns[1:]:  # Exclude 'ID' column\r\n#         st.write(\"Scatter Plot:\")\r\n#         fig = go.Figure()\r\n#         fig.add_trace(go.Scatter(x=df.index, y=df[column], mode='markers', name=column))\r\n#         st.plotly_chart(fig)\r\n#         return fig\r\n\r\ndef box_plot():\r\n    df = df_return()\r\n    fig = go.Figure()\r\n    for column in df.columns[1:]:  # Exclude 'ID' column\r\n        fig.add_trace(go.Box(y=df[column], name=column))\r\n    fig.update_layout(title='Box Plot(Fake_data understanding)', xaxis_title='Parameters', yaxis_title='Values')\r\n    st.plotly_chart(fig)\r\n    return fig\r\n\r\ndef bar_chart():\r\n    df_1, count_yes, count_no = count_yes_no()\r\n    distinct_check_value = list(set(df_1['check']))\r\n    data = {\r\n        'Category': distinct_check_value,\r\n        'Value': [count_yes, count_no]\r\n    }\r\n    df = pd.DataFrame(data)\r\n\r\n    # Create bar chart\r\n    fig = go.Figure(data=[go.Bar(x=df['Category'], y=df['Value'])])\r\n    fig.update_layout(title='Bar Chart', xaxis_title='Category', yaxis_title='Value')\r\n\r\n    # Display the chart in Streamlit\r\n    st.plotly_chart(fig)\r\ndef main():\r\n    scatter_plot()\r\n    box_plot()\r\n    bar_chart()\r\n\r\n    # compute_fit()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 3dfd761c32f8c5101de2f6ec1aaae571dc0979ff)
+++ b/main.py	(date 1713698605963)
@@ -1,89 +1,422 @@
+import pandas
 import streamlit as st
 import pandas as pd
+import numpy as np
 import plotly.graph_objects as go
-from data_model import data_model as hairpin_data_model, data_model
+import plotly.express as px
+from sklearn.cluster import KMeans, DBSCAN
+from sklearn.metrics import confusion_matrix
+
+from data_model import data_model
 from create_fake_data import create_fake_dataset
-from Compute_fit import compute_fit,count_yes_no
+from Compute_fit import compute_fit, count_yes_no
+from clustering.k_means import perform_kmeans
+
+st.set_page_config(layout="wide")
+
+
+def color_code(val):
+    if val == 'OK':
+        color = 'rgba(0, 255, 0, 0.3)'
+    elif val == 'NOK':
+        color = 'rgba(255, 0, 0, 0.3)'
+    elif val == 'Transition':
+        color = 'lightblue'
+    elif val == 'Clearance':
+        color = 'yellow'
+    else:
+        color = 'rgba(255, 165, 0, 0.3)'
+    return f'background-color: {color}'
+
+def color_code2(val):
+    if (val <= 1) and (val >= -1):
+        color = 'lightblue'
+    elif val > 1:
+        color = 'yellow'
+    elif val < -1:
+        color = 'rgba(255, 165, 0, 0.3)'
+    return f'background-color: {color}'
+
+
+def df_fitting_and_evaluation():
+    df = pd.read_excel("fake_data.xlsx")
+    df["fitting_distance"] = df["box_hole_diameter"] - df["cylinder_diameter"]
+
+    # Using & instead of 'and'
+    condition1 = (df["fitting_distance"] <= 1) & (df["fitting_distance"] >= -1)
+    condition2 = (df["fitting_distance"] > 1)
+
+    # Assigning values based on conditions
+    df.loc[condition1, "Evaluation"] = 'OK'
+    df.loc[condition1, "fitting_group"] = 'Transition'
+    df.loc[condition2, "Evaluation"] = 'NOK'
+    df.loc[condition2, "fitting_group"] = 'Clearance'
+    df.loc[~(condition1 | condition2), "Evaluation"] = 'NOK'
+    df.loc[~(condition1 | condition2), "fitting_group"] = 'Excess'
+
+    styled_df = df.style.map(color_code, subset=['Evaluation', 'fitting_group' ])
+    styled_df = styled_df.map(color_code2, subset=['fitting_distance'])
+
+    return df, styled_df
 
-def df_return():
-    df = create_fake_dataset()
-    return df
+
+def df_bar_chart_Evaluation():
+    df1, df2 = df_fitting_and_evaluation()
+    # st.dataframe(df2, width=800)
+    count_ok, count_nok = 0, 0
+    for val in df1["Evaluation"]:
+        if val == 'OK':
+            count_ok += 1
+        elif val == 'NOK':
+            count_nok += 1
+
+    data = {'Category': ['OK', 'NOK'], 'Value': [count_ok, count_nok]}
+    df = pd.DataFrame(data)
+
+    fig = go.Figure(data=[go.Bar(x=df['Category'], y=df['Value'])])
+    fig.update_layout(title='Evaluation Results', xaxis_title='Category', yaxis_title='Value')
+    st.plotly_chart(fig)
+
+
+def df_bar_chart_fitting_group():
+    df1, df2 = df_fitting_and_evaluation()
+    count_transition, count_clearance, count_excess = 0, 0, 0
+    for val in df1["fitting_group"]:
+        if val == 'Excess':
+            count_excess += 1
+        elif val == 'Clearance':
+            count_clearance += 1
+        elif val == 'Transition':
+            count_transition += 1
+
+    data = {'Category': ['Transition', 'Clearance', 'Excess'],
+            'Value': [count_transition, count_clearance, count_excess]}
+    df = pd.DataFrame(data)
+
+    fig = go.Figure(data=[go.Bar(x=df['Category'], y=df['Value'])])
+    fig.update_layout(title='Fitting Groups', xaxis_title='Category', yaxis_title='Value')
+    st.plotly_chart(fig)
+
 
 def scatter_plot():
-    st.markdown(
-        f'<h1 style="text-align: center;">Box and Cylinder Analysis</h1>',
-        unsafe_allow_html=True
-    )
-    df = df_return()
     df_1 = compute_fit()
     df_1 = df_1.drop(columns=['ID'], axis=1)
+    col1, col2 = st.columns([0.3, 0.7])
+    with col1:
+        selected_shape = st.selectbox("Select shape for scatter plot", ["Box", "Cylinder"], key="select_shape")
 
-    # Allow users to choose columns for the scatter plot
-    selected_columns = st.multiselect("Select columns for scatter plot", df_1.columns)
+        if selected_shape:
+            if selected_shape == "Box":
+                related_columns = ["box_hole_diameter", "box_hole_depth"]
+            elif selected_shape == "Cylinder":
+                related_columns = ["cylinder_diameter", "cylinder_height"]
+            else:
+                related_columns = []
 
-    # Define colors for "yes" and "no" values
-    yes_color = 'green'
-    no_color = 'red'
+            selected_column = st.selectbox("Select a column for scatter plot", related_columns, key="select_column")
 
-    # Create scatter plot if at least two columns are selected
-    if len(selected_columns) >= 2:
-        st.write("Scatter Plot:")
-        fig = go.Figure()
-        for col in selected_columns:
-            # Set color based on 'check' value
-            colors = [yes_color if val == 'yes' else no_color for val in df_1["check"]]
-            fig.add_trace(go.Scatter(x=df_1.index, y=df_1[col], mode='markers', name=col, marker=dict(color=colors)))
-        st.plotly_chart(fig)
-    else:
-        st.warning("Please select at least two columns for the scatter plot.")
+            yes_color = '#FF7F0E'
+            no_color = 'grey'
+
+        with col2:
+            if selected_column:
+                st.write("Scatter Plot:")
+                fig = go.Figure()
+
+                colors = [yes_color if val == 'yes' else no_color for val in df_1["check"]]
+                fig.add_trace(go.Scatter(x=df_1.index, y=df_1[selected_column], mode='markers', name=selected_column,
+                                         marker=dict(color=colors)))
+
+                min_value = data_model[selected_shape][selected_column]["min_value"]
+                max_value = data_model[selected_shape][selected_column]["max_value"]
+                target_value = data_model[selected_shape][selected_column]["target_value"]
+
+                fig.add_shape(type="line", x0=df_1.index.min(), y0=min_value, x1=df_1.index.max(), y1=min_value,
+                              line=dict(color="red", width=1, dash="solid"))
+                fig.add_shape(type="line", x0=df_1.index.min(), y0=max_value, x1=df_1.index.max(), y1=max_value,
+                              line=dict(color="red", width=1, dash="solid"))
+                fig.add_shape(type="line", x0=df_1.index.min(), y0=target_value, x1=df_1.index.max(), y1=target_value,
+                              line=dict(color="lime", width=1, dash="solid"))
+
+                fig.add_annotation(
+                    x=df_1.index.min(),
+                    y=min_value,
+                    text="Minimum Value",
+                    showarrow=False,
+                    font=dict(size=12, color="red")
+                )
+                fig.add_annotation(
+                    x=df_1.index.min(),
+                    y=max_value,
+                    text="Maximum Value",
+                    showarrow=False,
+                    font=dict(size=12, color="red")
+                )
+                fig.add_annotation(
+                    x=df_1.index.min(),
+                    y=target_value,
+                    text="Target Value",
+                    showarrow=False,
+                    font=dict(size=12, color="lime")
+                )
+
+                st.plotly_chart(fig)
+            else:
+                st.warning("Please select a column for the scatter plot.")
 
-# def scatter_plot():
-#     # Center the title
-#
-#     df = df_return()
-#     st.write(df)
-#     # Allow users to choose columns for the scatter plot
-#     # selected_columns = st.multiselect("Select columns for scatter plot", df.columns)
-#
-#     # Create scatter plot if at least two columns are selected
-#     for column in df.columns[1:]:  # Exclude 'ID' column
-#         st.write("Scatter Plot:")
-#         fig = go.Figure()
-#         fig.add_trace(go.Scatter(x=df.index, y=df[column], mode='markers', name=column))
-#         st.plotly_chart(fig)
-#         return fig
 
 def box_plot():
-    df = df_return()
+    df = pd.read_excel("fake_data.xlsx")
     fig = go.Figure()
-    for column in df.columns[1:]:  # Exclude 'ID' column
+    for column in df.columns[1:]:
         fig.add_trace(go.Box(y=df[column], name=column))
     fig.update_layout(title='Box Plot(Fake_data understanding)', xaxis_title='Parameters', yaxis_title='Values')
     st.plotly_chart(fig)
-    return fig
+
 
 def bar_chart():
     df_1, count_yes, count_no = count_yes_no()
+    df2, df3 = df_fitting_and_evaluation()
+    st.dataframe(df3, width=800)
     distinct_check_value = list(set(df_1['check']))
-    data = {
-        'Category': distinct_check_value,
-        'Value': [count_yes, count_no]
-    }
+    data = {'Category': distinct_check_value, 'Value': [count_yes, count_no]}
     df = pd.DataFrame(data)
 
-    # Create bar chart
     fig = go.Figure(data=[go.Bar(x=df['Category'], y=df['Value'])])
     fig.update_layout(title='Bar Chart', xaxis_title='Category', yaxis_title='Value')
+    st.plotly_chart(fig)
+
+
+def kmeans_info_popover():
+    st.popover(
+        "K-Means analysis provides insights into data clustering. It helps in identifying patterns and grouping similar data points together. Select the number of clusters and features for clustering to visualize the results.")
+
+
+def kmeans():
+    sections = {'Clusters 4 Operators': 'section-1'}
+
+    fake_data = pd.read_excel("fake_data.xlsx")
+    if "engineering_df" not in st.session_state:
+        engineering_df = pd.read_excel("Engineering_data.xlsx")
+        st.session_state["engineering_df"] = engineering_df
+        #st.write(fake_data)
+
+    st.header("Cluster Analysis", anchor=sections['Clusters 4 Operators'])
+    df = pd.read_excel("fake_data.xlsx")
+    with st.popover("Number of Clusters"):
+        automatic_clusters = st.checkbox("Automatic", False)
+        if automatic_clusters:
+            num_clusters = None
+        else:
+            num_clusters = st.selectbox('Number of clusters', [2, 3, 4, 5, 6, 7, 8, 9, 10], index=1)
+
+    num_clusters_write = num_clusters
+    if num_clusters_write is None:
+        num_clusters_write = " Automatic"
+
+    st.write("Selected number of Clusters:", num_clusters_write)
+    df = df.drop(columns=['ID'], axis=1)
+    columns = df.columns.tolist()
+    cluster_columns = st.multiselect('Select columns for clustering', columns, default=columns[2:6])
+    fake_data = df[cluster_columns].values
+
+    try:
+        cluster_labels, cluster_centers, inertia, optimal_k = perform_kmeans(fake_data, num_clusters)
+        center_df = pd.DataFrame(cluster_centers, columns=cluster_columns)
+        cluster_names = [f'Cluster {i}' for i in range(optimal_k)]
+        center_df['Name'] = cluster_names
+        engineering_df = pd.read_excel("Engineering_data.xlsx")  # check df session control
+        cluster_df = center_df
+
+        st.subheader('Cluster Centers', anchor='cluster-centers')
+        cluster_df["index_num"] = cluster_df.index
+        figures = {}
+
+        for column in cluster_columns:
+            fig = px.scatter(cluster_df, x="index_num", y=column, color="Name")
+            fig.update_traces(marker={'size': 15})
+
+            if column in engineering_df['name'].values:
+                target_value = engineering_df.loc[engineering_df['name'] == column, 'target'].values[0]
+                min_value = engineering_df.loc[engineering_df['name'] == column, 'min'].values[0]
+                max_value = engineering_df.loc[engineering_df['name'] == column, 'max'].values[0]
+
+                fig.add_shape(type="line", x0=0, y0=target_value, x1=len(cluster_df[column]) - 1, y1=target_value,
+                              line=dict(color="green", width=1), name='target')
+                fig.add_shape(type="line", x0=0, y0=min_value, x1=len(cluster_df[column]) - 1, y1=min_value,
+                              line=dict(color="violet", width=1), name='min')
+                fig.add_shape(type="line", x0=0, y0=max_value, x1=len(cluster_df[column]) - 1, y1=max_value,
+                              line=dict(color="red", width=1), name='max')
+
+            fig.update_layout(title=f"Cluster Centers for {column}", xaxis_title="Cluster Index", yaxis_title=column)
+            figures[column] = fig
+
+        selected_graph = st.selectbox("Select Graph", cluster_columns)
+        st.plotly_chart(figures[selected_graph])
 
-    # Display the chart in Streamlit
+        cluster_max_values = []
+        cluster_min_values = []
+
+        for i in range(optimal_k):
+            cluster_data = fake_data[cluster_labels == i]
+            cluster_max = np.max(cluster_data, axis=0)
+            cluster_min = np.min(cluster_data, axis=0)
+            cluster_max_values.append(cluster_max)
+            cluster_min_values.append(cluster_min)
+
+        max_df = pd.DataFrame(cluster_max_values, columns=cluster_columns)
+        min_df = pd.DataFrame(cluster_min_values, columns=cluster_columns)
+
+        max_df['Cluster'] = [f'Cluster {i}' for i in range(optimal_k)]
+        min_df['Cluster'] = [f'Cluster {i}' for i in range(optimal_k)]
+
+        fig = go.Figure()
+
+        for i, column in enumerate(cluster_columns):
+            for j in range(optimal_k):
+                fig.add_trace(go.Bar(x=[f'Cluster {j} - Min', f'Cluster {j} - Max'],
+                                     y=[min_df[column][j], max_df[column][j]],
+                                     name=column,
+                                     marker_color=px.colors.qualitative.Set1[j]))
+
+        fig.update_layout(title="Min and Max Values for Each Cluster",
+                          xaxis_title="Cluster",
+                          yaxis_title="Value",
+                          barmode='group')
+
+        st.plotly_chart(fig)
+
+    except ValueError as e:
+        st.error("Please select atleast one column for clustering")
+
+def fitting_group_visualisation():
+    st.header("Synthetic Data")
+    main_df, df1 = df_fitting_and_evaluation()
+    st.dataframe(df1, width=1000)
+    st.header("K-means")
+    col1, col2 = st.columns(2)
+    with col1:
+        # kmeans clustering for fitting distance
+        df_for_clustering = main_df.drop(columns=['ID', 'Evaluation'])
+        fitting_distance_data = df_for_clustering['fitting_distance'].values.reshape(-1, 1)
+        # Specify the number of clusters
+        n_clusters = 3
+
+        # Initialize KMeans model
+        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
+
+        # Fit the model to the data
+        kmeans.fit(fitting_distance_data)
+
+        # Add cluster labels to the DataFrame
+        df_for_clustering['cluster_label'] = kmeans.labels_
+        # st.write(df_for_clustering)
+        # if df_for_clustering['']
+        # df_for_clustering['cluster_name_cm'] =
+
+        # Display the cluster centers
+        # st.write("Cluster centers:")
+        # st.write(kmeans.cluster_centers_)
+        centers = []
+        for x in kmeans.cluster_centers_:
+            for y in x:
+                centers.append(y)
+        print(centers)
+        # Plotting using Plotly
+        fig = px.scatter(df_for_clustering, y='fitting_distance', color='cluster_label',
+                         title='KMeans Clustering based on Fitting Distance')
+
+        # Plotting cluster centers
+        fig.add_scatter(y=centers, x=[500] * n_clusters, mode='markers',
+                        marker=dict(color='black', size=10), name='Cluster Centers')
+
+        # st.write(df_for_clustering['cluster_label'])
+        st.plotly_chart(fig, use_container_width=True)
+    with col2:
+        # fitting group visualization kmeans
+        df_vis = main_df.loc[:, ['ID', 'fitting_distance', 'fitting_group']]
+        # st.dataframe(df_vis)
+        # Plotting using Plotly
+        fig = px.scatter(df_vis, x='ID', y='fitting_distance', color='fitting_group',
+                         title='Fitting Distance vs Number of Points',
+                         labels={'ID': 'Number of Points', 'fitting_distance': 'Fitting Distance'})
+
+        # Customize the layout
+        fig.update_layout(showlegend=True)
+
+        # confusion_matrix(y_true, y_pred)
+
+        st.plotly_chart(fig, use_container_width=True)
+
+
+def fitting_group_visualisation_dbscan():
+    main_df, df1 = df_fitting_and_evaluation()
+    df_vis = main_df.loc[:, ['ID', 'fitting_distance', 'fitting_group']]
+
+    st.header("DBSCAN")
+    # Apply DBSCAN clustering
+    clustering = DBSCAN(eps=0.2, min_samples=3).fit(df_vis[['fitting_distance']])
+
+    # Add cluster labels to the DataFrame
+    cluster_labels = clustering.labels_
+    unique_clusters = np.unique(cluster_labels)
+    if -1 in unique_clusters:
+        unique_clusters = unique_clusters[1:]
+    label_mapping = {cluster: i for i, cluster in enumerate(unique_clusters)}
+    df_vis['cluster_label'] = cluster_labels
+    df_vis['cluster_label'] = df_vis['cluster_label'].map(label_mapping).fillna(-1).astype(int)
+    # st.write(df_vis)
+    # Plotting using Plotly
+    fig = px.scatter(df_vis, x='ID', y='fitting_distance', color='cluster_label',
+                     title='Fitting Distance vs Number of Points (DBSCAN Clustering)',
+                     labels={'ID': 'Number of Points', 'fitting_distance': 'Fitting Distance',
+                             'cluster_label': 'Cluster'})
+
+    # Plotting using Plotly
+    fig = px.scatter(df_vis, x='ID', y='fitting_distance', color='cluster_label',
+                     title='Fitting Distance vs Number of Points (DBSCAN Clustering)',
+                     labels={'ID': 'Number of Points', 'fitting_distance': 'Fitting Distance',
+                             'cluster_label': 'Cluster'})
+
+    # Customize the layout
+    fig.update_layout(showlegend=True)
+
+    # Show the plot
     st.plotly_chart(fig)
+
+
 def main():
-    scatter_plot()
-    box_plot()
-    bar_chart()
-
-    # compute_fit()
+    st.markdown('<h1 style="text-align: center;">Box and Cylinder Analysis</h1>', unsafe_allow_html=True)
+
+    sections = {'Bar-Chart': 'Bar-Chart', 'Plot': 'Plot', 'K-Means': 'k-means'}
+
+    st.sidebar.title('PMV4')
+    selected_nav = st.sidebar.selectbox("Navigate to", list(sections.keys()), key='navigation')
+
+    if selected_nav:
+        st.session_state.selected_nav = sections[selected_nav]
+
+    nav = st.session_state.selected_nav
+
+    if nav == 'Bar-Chart':
+        # bar_chart()
+        df_bar_chart_Evaluation()
+        df_bar_chart_fitting_group()
+
+    elif nav == 'Plot':
+        tab1, tab2 = st.tabs(["Box-Plot", "Scatter-Plot"])
+        with tab1:
+            st.header("Box-Plot")
+            box_plot()
+        with tab2:
+            st.header("Scatter-Plot")
+            scatter_plot()
+    elif nav == 'k-means':
+        kmeans_info_popover()
+        fitting_group_visualisation()
+        fitting_group_visualisation_dbscan()
+        kmeans()
 
 
 if __name__ == "__main__":
-    main()
+    main()
\ No newline at end of file
Index: Decision_Tress.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nfrom sklearn.preprocessing import LabelEncoder\r\nfrom main import df_fitting_and_evaluation\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nfrom sklearn.metrics import confusion_matrix, accuracy_score\r\nfrom sklearn.metrics import classification_report\r\n\r\ndef prepare_DT_df():\r\n    df, style_df = df_fitting_and_evaluation()\r\n    df.drop(columns=['ID', 'Evaluation'])\r\n    # Initialize LabelEncoder\r\n    label_encoder = LabelEncoder()\r\n\r\n    # Fit and transform the 'fitting_group' column\r\n    df['fitting_group_encoded'] = label_encoder.fit_transform(df['fitting_group'])\r\n\r\n    # Mapping of original values to encoded values\r\n    label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))\r\n    print(\"Label mapping:\", label_mapping)\r\n\r\n    # Replace 'fitting_group' with 'fitting_group_encoded'\r\n    df.drop(columns=['fitting_group'], inplace=True)\r\n    df.rename(columns={'fitting_group_encoded': 'fitting_group'}, inplace=True)\r\n    df.drop(columns=['Evaluation','ID','fitting_distance'], inplace=True)\r\n\r\n    return df\r\n\r\n\r\ndef Decision_Tress():\r\n    df = prepare_DT_df()\r\n    X = df.iloc[:, 0:4]\r\n    y = df.iloc[:, 4]\r\n    #X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=17, test_size=0.2)\r\n    x_main,x_test,y_main,y_test=train_test_split(X,y, test_size=0.2, random_state=17,stratify=y)\r\n    x_train, x_val,y_train,y_val=train_test_split(x_main,y_main, test_size=0.2, random_state=17, stratify=y_main)\r\n    #print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)\r\n    dtc = DecisionTreeClassifier(criterion='entropy', max_depth=6)\r\n\r\n    #USEless thing\r\n    # l = [0.0,0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10]\r\n    # crit = ['gini', 'entropy']\r\n    # dict_ijk = {}\r\n    # for i in range(1,8):\r\n    #     for j in l:\r\n    #         for k in crit:\r\n    #             dtc = DecisionTreeClassifier(criterion='entropy', max_depth=6)\r\n    #             dtc.fit(x_main, y_main)\r\n    #             y_pred_val = dtc.predict(x_val)\r\n    #             y_pred_test = dtc.predict(x_test)\r\n    #             acc_val = accuracy_score(y_val, y_pred_val)\r\n    #             acc_test = accuracy_score(y_test, y_pred_test)\r\n    #\r\n    #             if acc_test > 0.85:\r\n    #                 dict_ijk[(i, j, k)] = acc_test\r\n    #                 # print(f\"depth={i}, criterion={k}, ccp_alpha={j}\")\r\n    #                 # print(\"accuracy_report for Validation:\")\r\n    #                 # print(acc_val)\r\n    #                 # print(\"accuracy_report of TEST:\")\r\n    #                 # print(acc_test)\r\n    #\r\n    # max_value = max(dict_ijk.values())\r\n    # key_with_max_value = [key for key, value in dict_ijk.items() if value == max_value][0]\r\n    # print(key_with_max_value, max_value)\r\n\r\n    dtc.fit(x_main, y_main)\r\n    #This is Validation\r\n    y_pred_val = dtc.predict(x_val)\r\n    print(\"Confusion Matrics for Validation:\")\r\n    print(confusion_matrix(y_val, y_pred_val))\r\n    print(\"classification_report for Validation:\")\r\n    print(classification_report(y_val, y_pred_val))\r\n\r\n\r\n    #this is for Testing\r\n    y_pred_test = dtc.predict(x_test)\r\n    print(\"Confusion Matrics for TEST:\")\r\n    print(confusion_matrix(y_test, y_pred_test))\r\n    print(\"classification_report of TEST:\")\r\n    print(classification_report(y_test, y_pred_test))\r\n\r\n    features = pd.DataFrame(dtc.feature_importances_, index=X.columns)\r\n    print(features.head(6))\r\n\r\nDecision_Tress()\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Decision_Tress.py b/Decision_Tress.py
--- a/Decision_Tress.py	(revision 3dfd761c32f8c5101de2f6ec1aaae571dc0979ff)
+++ b/Decision_Tress.py	(date 1713700437638)
@@ -2,13 +2,18 @@
 from sklearn.preprocessing import LabelEncoder
 from main import df_fitting_and_evaluation
 from sklearn.model_selection import train_test_split
-from sklearn.tree import DecisionTreeClassifier
-from sklearn.metrics import confusion_matrix, accuracy_score
-from sklearn.metrics import classification_report
+from sklearn.tree import DecisionTreeClassifier, plot_tree
+from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
+import matplotlib.pyplot as plt
 
 def prepare_DT_df():
     df, style_df = df_fitting_and_evaluation()
-    df.drop(columns=['ID', 'Evaluation'])
+    print("Original DataFrame:")
+    print(df.head())  # Check the original DataFrame
+
+    # Drop unnecessary columns
+    df = df.drop(columns=['ID', 'Evaluation', 'fitting_distance'])
+
     # Initialize LabelEncoder
     label_encoder = LabelEncoder()
 
@@ -19,51 +24,32 @@
     label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
     print("Label mapping:", label_mapping)
 
-    # Replace 'fitting_group' with 'fitting_group_encoded'
-    df.drop(columns=['fitting_group'], inplace=True)
-    df.rename(columns={'fitting_group_encoded': 'fitting_group'}, inplace=True)
-    df.drop(columns=['Evaluation','ID','fitting_distance'], inplace=True)
+    # Drop the original 'fitting_group' column
+    df = df.drop(columns=['fitting_group'])
+
+    print("DataFrame after preprocessing:")
+    print(df.head())  # Check the DataFrame after preprocessing
 
     return df
 
-
 def Decision_Tress():
     df = prepare_DT_df()
     X = df.iloc[:, 0:4]
     y = df.iloc[:, 4]
-    #X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=17, test_size=0.2)
     x_main,x_test,y_main,y_test=train_test_split(X,y, test_size=0.2, random_state=17,stratify=y)
     x_train, x_val,y_train,y_val=train_test_split(x_main,y_main, test_size=0.2, random_state=17, stratify=y_main)
-    #print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)
+
     dtc = DecisionTreeClassifier(criterion='entropy', max_depth=6)
-
-    #USEless thing
-    # l = [0.0,0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10]
-    # crit = ['gini', 'entropy']
-    # dict_ijk = {}
-    # for i in range(1,8):
-    #     for j in l:
-    #         for k in crit:
-    #             dtc = DecisionTreeClassifier(criterion='entropy', max_depth=6)
-    #             dtc.fit(x_main, y_main)
-    #             y_pred_val = dtc.predict(x_val)
-    #             y_pred_test = dtc.predict(x_test)
-    #             acc_val = accuracy_score(y_val, y_pred_val)
-    #             acc_test = accuracy_score(y_test, y_pred_test)
-    #
-    #             if acc_test > 0.85:
-    #                 dict_ijk[(i, j, k)] = acc_test
-    #                 # print(f"depth={i}, criterion={k}, ccp_alpha={j}")
-    #                 # print("accuracy_report for Validation:")
-    #                 # print(acc_val)
-    #                 # print("accuracy_report of TEST:")
-    #                 # print(acc_test)
-    #
-    # max_value = max(dict_ijk.values())
-    # key_with_max_value = [key for key, value in dict_ijk.items() if value == max_value][0]
-    # print(key_with_max_value, max_value)
-
     dtc.fit(x_main, y_main)
+
+    # Convert class names to strings
+    class_names = df['fitting_group_encoded'].unique().astype(str)
+
+    # Visualize the decision tree
+    plt.figure(figsize=(20, 10))
+    plot_tree(dtc, feature_names=X.columns, class_names=class_names, filled=True)
+    plt.show()
+
     #This is Validation
     y_pred_val = dtc.predict(x_val)
     print("Confusion Matrics for Validation:")
@@ -71,7 +57,6 @@
     print("classification_report for Validation:")
     print(classification_report(y_val, y_pred_val))
 
-
     #this is for Testing
     y_pred_test = dtc.predict(x_test)
     print("Confusion Matrics for TEST:")
@@ -83,6 +68,3 @@
     print(features.head(6))
 
 Decision_Tress()
-
-
-
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"54c727bd-5502-4d94-92e6-ef0722eaca1d\" name=\"Changes\" comment=\"Made changes to the UI accordingly\">\r\n      <change afterPath=\"$PROJECT_DIR$/Decision_Tress.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Engineering_data.xlsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Engineering_data.xlsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/data_model.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/data_model.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/fake_data.xlsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/fake_data.xlsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GithubDefaultAccount\">\r\n    <option name=\"defaultAccountId\" value=\"517ed4f1-9889-4ab5-9540-d367fe4e53f3\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2dxb45aM3d1ulKtBGNNQ8EgcK55\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.Compute_fit.executor\": \"Run\",\r\n    \"Python.Decision_Tress.executor\": \"Run\",\r\n    \"Python.create_fake_data.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"nitin\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/nitin/OneDrive/Desktop/OVGU/ML-Project/Clusters4Operators\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Python.Decision_Tress\">\r\n    <configuration name=\"Compute_fit\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ML_Stator_Hairline_Project\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Compute_fit.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Decision_Tress\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ML_Stator_Hairline_Project\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Decision_Tress.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"create_fake_data\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ML_Stator_Hairline_Project\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/create_fake_data.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"ML_Stator_Hairline_Project\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.Decision_Tress\" />\r\n        <item itemvalue=\"Python.create_fake_data\" />\r\n        <item itemvalue=\"Python.Compute_fit\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-d68999036c7f-b11f5e8da5ad-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.14475.56\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"54c727bd-5502-4d94-92e6-ef0722eaca1d\" name=\"Changes\" comment=\"\" />\r\n      <created>1710952482276</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1710952482276</updated>\r\n      <workItem from=\"1710952488034\" duration=\"1729000\" />\r\n      <workItem from=\"1711637649827\" duration=\"21285000\" />\r\n      <workItem from=\"1711793579912\" duration=\"12415000\" />\r\n      <workItem from=\"1711807996403\" duration=\"46000\" />\r\n      <workItem from=\"1712145482185\" duration=\"613000\" />\r\n      <workItem from=\"1712393847203\" duration=\"453000\" />\r\n      <workItem from=\"1712394321678\" duration=\"14181000\" />\r\n      <workItem from=\"1712669822643\" duration=\"8029000\" />\r\n      <workItem from=\"1712837522683\" duration=\"613000\" />\r\n      <workItem from=\"1713015571159\" duration=\"7414000\" />\r\n      <workItem from=\"1713099377988\" duration=\"197000\" />\r\n      <workItem from=\"1713099585251\" duration=\"17857000\" />\r\n      <workItem from=\"1713181765733\" duration=\"266000\" />\r\n      <workItem from=\"1713185752780\" duration=\"2000\" />\r\n      <workItem from=\"1713210357088\" duration=\"263000\" />\r\n      <workItem from=\"1713210637644\" duration=\"1022000\" />\r\n      <workItem from=\"1713214233369\" duration=\"1631000\" />\r\n      <workItem from=\"1713525109522\" duration=\"6169000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"changed Compute_fit.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711797527397</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711797527397</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added lines for scatter plot in main.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711802653203</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711802653203</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Added lines for scatter plot in main.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711804881713</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711804881713</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Added lines for scatter plot in main.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712409725385</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712409725386</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\" Added k-means in main.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712671737953</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712671737953</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\" Added k-means in main.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712671778921</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712671778921</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Added UI elements to main.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712677522968</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712677522968</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Added chart and color and made the dataset static\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713100566709</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713100566709</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Added chart and color and made the dataset static\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713102804858</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713102804858</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Added fake_data.xlxs as a static file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713103069763</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713103069763</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Added Kmeans and DBscan to main and also added visualisations for clustering\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713118583648</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713118583648</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\".\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713181890413</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713181890414</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Made changes to the UI accordingly\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713215273283</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713215273283</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"14\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"changed Compute_fit.py\" />\r\n    <MESSAGE value=\"Added lines for scatter plot in main.py\" />\r\n    <MESSAGE value=\" Added k-means in main.py\" />\r\n    <MESSAGE value=\"Added UI elements to main.py\" />\r\n    <MESSAGE value=\"Added chart and color and made the dataset static\" />\r\n    <MESSAGE value=\"Added fake_data.xlxs as a static file\" />\r\n    <MESSAGE value=\"Added Kmeans and DBscan to main and also added visualisations for clustering\" />\r\n    <MESSAGE value=\".\" />\r\n    <MESSAGE value=\"Made changes to the UI accordingly\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Made changes to the UI accordingly\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ML_Stator_Hairline_Project$create_fake_data.coverage\" NAME=\"create_fake_data Coverage Results\" MODIFIED=\"1713529856935\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/ML_Stator_Hairline_Project$Compute_fit.coverage\" NAME=\"Compute_fit Coverage Results\" MODIFIED=\"1711796983528\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/ML_Stator_Hairline_Project$Decision_Tress.coverage\" NAME=\"Decision_Tress Coverage Results\" MODIFIED=\"1713530917402\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/ML_Stator_Hairline_Project$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1711651733731\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3dfd761c32f8c5101de2f6ec1aaae571dc0979ff)
+++ b/.idea/workspace.xml	(date 1713700521969)
@@ -4,12 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="54c727bd-5502-4d94-92e6-ef0722eaca1d" name="Changes" comment="Made changes to the UI accordingly">
-      <change afterPath="$PROJECT_DIR$/Decision_Tress.py" afterDir="false" />
+    <list default="true" id="54c727bd-5502-4d94-92e6-ef0722eaca1d" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Engineering_data.xlsx" beforeDir="false" afterPath="$PROJECT_DIR$/Engineering_data.xlsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/data_model.py" beforeDir="false" afterPath="$PROJECT_DIR$/data_model.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/fake_data.xlsx" beforeDir="false" afterPath="$PROJECT_DIR$/fake_data.xlsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Decision_Tress.py" beforeDir="false" afterPath="$PROJECT_DIR$/Decision_Tress.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -25,16 +22,8 @@
     </option>
   </component>
   <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="master" />
-      </map>
-    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="GithubDefaultAccount">
-    <option name="defaultAccountId" value="517ed4f1-9889-4ab5-9540-d367fe4e53f3" />
-  </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 7
 }</component>
@@ -52,9 +41,8 @@
     "Python.main.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "nitin",
+    "git-widget-placeholder": "setty__new__branch",
     "ignore.virus.scanning.warn.message": "true",
-    "last_opened_file_path": "C:/Users/nitin/OneDrive/Desktop/OVGU/ML-Project/Clusters4Operators",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
@@ -160,8 +148,8 @@
     <recent_temporary>
       <list>
         <item itemvalue="Python.Decision_Tress" />
+        <item itemvalue="Python.Compute_fit" />
         <item itemvalue="Python.create_fake_data" />
-        <item itemvalue="Python.Compute_fit" />
       </list>
     </recent_temporary>
   </component>
@@ -182,149 +170,17 @@
       <updated>1710952482276</updated>
       <workItem from="1710952488034" duration="1729000" />
       <workItem from="1711637649827" duration="21285000" />
-      <workItem from="1711793579912" duration="12415000" />
-      <workItem from="1711807996403" duration="46000" />
-      <workItem from="1712145482185" duration="613000" />
-      <workItem from="1712393847203" duration="453000" />
-      <workItem from="1712394321678" duration="14181000" />
-      <workItem from="1712669822643" duration="8029000" />
-      <workItem from="1712837522683" duration="613000" />
-      <workItem from="1713015571159" duration="7414000" />
-      <workItem from="1713099377988" duration="197000" />
-      <workItem from="1713099585251" duration="17857000" />
-      <workItem from="1713181765733" duration="266000" />
-      <workItem from="1713185752780" duration="2000" />
-      <workItem from="1713210357088" duration="263000" />
-      <workItem from="1713210637644" duration="1022000" />
-      <workItem from="1713214233369" duration="1631000" />
-      <workItem from="1713525109522" duration="6169000" />
-    </task>
-    <task id="LOCAL-00001" summary="changed Compute_fit.py">
-      <option name="closed" value="true" />
-      <created>1711797527397</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1711797527397</updated>
-    </task>
-    <task id="LOCAL-00002" summary="Added lines for scatter plot in main.py">
-      <option name="closed" value="true" />
-      <created>1711802653203</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1711802653203</updated>
-    </task>
-    <task id="LOCAL-00003" summary="Added lines for scatter plot in main.py">
-      <option name="closed" value="true" />
-      <created>1711804881713</created>
-      <option name="number" value="00003" />
-      <option name="presentableId" value="LOCAL-00003" />
-      <option name="project" value="LOCAL" />
-      <updated>1711804881713</updated>
-    </task>
-    <task id="LOCAL-00004" summary="Added lines for scatter plot in main.py">
-      <option name="closed" value="true" />
-      <created>1712409725385</created>
-      <option name="number" value="00004" />
-      <option name="presentableId" value="LOCAL-00004" />
-      <option name="project" value="LOCAL" />
-      <updated>1712409725386</updated>
-    </task>
-    <task id="LOCAL-00005" summary=" Added k-means in main.py">
-      <option name="closed" value="true" />
-      <created>1712671737953</created>
-      <option name="number" value="00005" />
-      <option name="presentableId" value="LOCAL-00005" />
-      <option name="project" value="LOCAL" />
-      <updated>1712671737953</updated>
-    </task>
-    <task id="LOCAL-00006" summary=" Added k-means in main.py">
-      <option name="closed" value="true" />
-      <created>1712671778921</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1712671778921</updated>
+      <workItem from="1711793579912" duration="499000" />
     </task>
-    <task id="LOCAL-00007" summary="Added UI elements to main.py">
-      <option name="closed" value="true" />
-      <created>1712677522968</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1712677522968</updated>
-    </task>
-    <task id="LOCAL-00008" summary="Added chart and color and made the dataset static">
-      <option name="closed" value="true" />
-      <created>1713100566709</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1713100566709</updated>
-    </task>
-    <task id="LOCAL-00009" summary="Added chart and color and made the dataset static">
-      <option name="closed" value="true" />
-      <created>1713102804858</created>
-      <option name="number" value="00009" />
-      <option name="presentableId" value="LOCAL-00009" />
-      <option name="project" value="LOCAL" />
-      <updated>1713102804858</updated>
-    </task>
-    <task id="LOCAL-00010" summary="Added fake_data.xlxs as a static file">
-      <option name="closed" value="true" />
-      <created>1713103069763</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1713103069763</updated>
-    </task>
-    <task id="LOCAL-00011" summary="Added Kmeans and DBscan to main and also added visualisations for clustering">
-      <option name="closed" value="true" />
-      <created>1713118583648</created>
-      <option name="number" value="00011" />
-      <option name="presentableId" value="LOCAL-00011" />
-      <option name="project" value="LOCAL" />
-      <updated>1713118583648</updated>
-    </task>
-    <task id="LOCAL-00012" summary=".">
-      <option name="closed" value="true" />
-      <created>1713181890413</created>
-      <option name="number" value="00012" />
-      <option name="presentableId" value="LOCAL-00012" />
-      <option name="project" value="LOCAL" />
-      <updated>1713181890414</updated>
-    </task>
-    <task id="LOCAL-00013" summary="Made changes to the UI accordingly">
-      <option name="closed" value="true" />
-      <created>1713215273283</created>
-      <option name="number" value="00013" />
-      <option name="presentableId" value="LOCAL-00013" />
-      <option name="project" value="LOCAL" />
-      <updated>1713215273283</updated>
-    </task>
-    <option name="localTasksCounter" value="14" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="changed Compute_fit.py" />
-    <MESSAGE value="Added lines for scatter plot in main.py" />
-    <MESSAGE value=" Added k-means in main.py" />
-    <MESSAGE value="Added UI elements to main.py" />
-    <MESSAGE value="Added chart and color and made the dataset static" />
-    <MESSAGE value="Added fake_data.xlxs as a static file" />
-    <MESSAGE value="Added Kmeans and DBscan to main and also added visualisations for clustering" />
-    <MESSAGE value="." />
-    <MESSAGE value="Made changes to the UI accordingly" />
-    <option name="LAST_COMMIT_MESSAGE" value="Made changes to the UI accordingly" />
-  </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/ML_Stator_Hairline_Project$create_fake_data.coverage" NAME="create_fake_data Coverage Results" MODIFIED="1713529856935" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/ML_Stator_Hairline_Project$Compute_fit.coverage" NAME="Compute_fit Coverage Results" MODIFIED="1711796983528" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/ML_Stator_Hairline_Project$Decision_Tress.coverage" NAME="Decision_Tress Coverage Results" MODIFIED="1713530917402" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/ML_Stator_Hairline_Project$create_fake_data.coverage" NAME="create_fake_data Coverage Results" MODIFIED="1711642715791" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/ML_Stator_Hairline_Project$Compute_fit.coverage" NAME="Compute_fit Coverage Results" MODIFIED="1711664988296" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/ML_Stator_Hairline_Project$main.coverage" NAME="main Coverage Results" MODIFIED="1711651733731" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/ML_Data_Analysis_Project$Decision_Tress.coverage" NAME="Decision_Tress Coverage Results" MODIFIED="1713700440462" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
